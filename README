
This project is an aggregate b-tree implementation.  
It is copyrighted by Jeremy Bruestle (2012), and is being released under the GNU Affero General Public License version 3.

What's an aggregate b-tree?  

Well, being with a normal on disk b-tree.  This in itself is a fairly powerful data structure that allows fast storage and lookup of key-value pairs, as well as walking keys in order, or finding the nearest key.  Unlike many b-tree implementions, this implementaion supports an idea called 'shadowing', which means that it's a trival operation to 'clone' the btree.  This allows one thread to modify a tree while another continues to see a stable version, or to keep many old versions with little overhead.  The code in this libary is thread safe, and crash safe.  Even if a process crashes in the middle of an operation, after it restarts, the tree will be in a stable state.

Aggregation adds another level of features.  Specifically, it's also possible to quickly compute 'aggregates', such as totals, maximums, minimums and averages over any range of keys.  It's also possible quickly move through the tree based on these aggregations.  Aggregations also allow more non-obvious abilities, such as putting ranges into a tree, and quickly finding all the overlapping ranges, quickly jumping of a specific number of records, seeing only 'high-priority' records, or even storing 3 dimensional points and quickly finding all of the points within an arbitrary box!

Currently there are two independent API's to the libaray, a C++ api, and a pythone API. In addition to the main algorithm, there are a few additional wrappers to make some of the more complex cases (such as spatial indexing) easier.  There is some variation with regard to these additional features between with C++ and python versions. To learn about the python version, please see README_PYTHON, for the c++ version see README_CPP.



